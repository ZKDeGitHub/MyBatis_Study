<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    (1)Mapper接口的全路径需要和mapper映射文件中的namespace保持一致
    (2)Mapper接口中的抽象方法的方法名称需要和mapper映射文件中(select|insert|update|delete)标签的id属性值保持一致
    (3)Mapper接口中的抽象方法的参数的类型需要和mapper映射文件中的parameterType的属性值保持一致
    (4)Mapper接口中的抽象方法的返回结果的类型需要和mapper映射文件中的resultType的属性值保持一致
-->

<!--
    namespace：命名空间;
    属性值需要和Mapper(UserMapper)接口的全路径保持一致;
    当前映射文件的唯一标识;
-->

<mapper namespace="com.javasm.mapper.UserMapper">
    <!--
        id：属性值需要和Mapper接口中的抽象方法的方法名称保持一致;
        parameterType：属性值和Mapper接口中的抽象方法的参数类型保持一致;
        resultType：属性值和Mapper接口中的抽象方法的返回结果类型保持一致;
    -->

    <!--
        根据id查询数据
        User queryUserById(Integer id);
        parameterType="int" 此处的int是别名，实际是java.lang.Integer

    -->
    <select id="queryUserById" parameterType="int" resultType="user">
        select id,name,birthday,age,sex,address from user where id=#{id}
    </select>

    <!--
        按照年龄排序，查询所有的用户数据
        List<User> queryUserListOrderByAge();
    -->
    <select id="queryUserListOrderByAge" resultType="user">
        select id,name,birthday,age,sex,address
        from user
        order by age;
    </select>

    <!--
        查询姓张的user
        List<User> queryUserListByFamilyName(String familyNmae);
    -->
    <!--
        使用模糊查询时不能用#{}，必须用${}
    -->
    <select id="queryUserListByFamilyName" parameterType="String" resultType="user">
        SELECT id,name,birthday,age,sex,address
        FROM user
        WHERE name LIKE '${value}%';
    </select>
    <!--
        根据姓名和年龄查询
        List<User> queryUserListByFamilyNameAndAge(UserExtend userExtend);

        参数类型：嵌套类型
            使用.语法取值
    -->
    <select id="queryUserListByFamilyNameAndAge" parameterType="UserExtend" resultType="User">
        SELECT id,name,birthday,age,sex,address
        FROM user
        WHERE name LIKE '${familyName}%'
        and age=#{user.age};
    </select>

    <!--
        根据姓名和地址查询，参数为Map类型
        List<User> queryUserListByFamilyNameAndAddress(Map<String,String> param);
    -->
    <select id="queryUserListByFamilyNameAndAddress" parameterType="map" resultType="user">
        SELECT id,name,birthday,age,sex,address
        FROM user
        WHERE name LIKE '${familyName}%'
        and
        address LIKE '%${address}%'
    </select>

    <!--
        根据姓名和性别查询，参数设置为2个
        List<User> queryUserListByFamilyNameAndSex(@Param("userName") String name,@Param("userSex") String sex);

    -->
    <!--
        参数为2个或者更多
            使用@Param注解;
            @Param("xxx")中的xxx需要和映射文件中的#{xxx}中的xxx保持一致

        parameterType是不用设置的，mybatis会自动找到对应的类型
    -->
    <select id="queryUserListByFamilyNameAndSex" resultType="user">
        SELECT id,name,birthday,age,sex,address
        FROM user
        WHERE name = #{userName}
        and sex = #{userSex}
    </select>

</mapper>