<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.javasm.mapper.UserNewMapper">

    <!-- 抽出公共的sql语句 -->
    <sql id="queryTable">
        select user_id,user_name,user_birthday,user_age,user_sex,user_address
        from user_new
    </sql>


    <!--
        当数据库中字段与实体类中的成员变量名称不是一一对应时
        使用resultMap标签 替换resultType
    -->
    <!--
        id：唯一标识  某些select标签的resultMap的属性值需要和该标签的id属性值一致
        type：查询结果的集合
        column：字段名
        property：属性名
    -->
    <resultMap id="UserNewMap" type="UserNew">
        <id column="user_id" property="userId"></id>
        <result column="user_name" property="userName"></result>
        <result column="user_birthday" property="userBirthday"></result>
        <result column="user_age" property="userAge"></result>
        <result column="user_sex" property="userSex"></result>
        <result column="user_address" property="userAddress"></result>
    </resultMap>

    <!--
        根据id查询数据
        UserNew queryByUserNewId(Integer userId);
    -->

    <select id="queryByUserNewId" parameterType="int" resultMap="UserNewMap">
        <!--引入抽出的公共sql：refid属性值需要和sql标签的id属性值一致-->
        <include refid="queryTable"></include>
        where user_id = #{userId};
    </select>

    <!--
        查询所有符合条件的数据
        List<UserNew> queryUserNew(UserNew userNew);
    -->
    <select id="queryUserNew" parameterType="UserNew" resultMap="UserNewMap">
        <include refid="queryTable"></include>
        <where>
            <if test="userName!=null and userName!=''">
                and user_name like '${userName}%'
            </if>
            <if test="userBirthday!=null">
                and user_birthday=#{userBirthday}
            </if>
            <if test="userAge!=null and userAge!=0">
                and user_age=#{userAge}
            </if>
            <if test="userSex!=null and userSex!=''">
                and user_sex=#{userSex}
            </if>
            <if test="userAddress!=null and userAddress!=''">
                and user_address=#{userAddress}
            </if>
        </where>
    </select>

    <!--
        根据id修改数据
        void updateById(UserNew userNew);
    -->
    <update id="updateById" parameterType="UserNew">
        update user_new

        <!--
            (1)使用场景：修改内容不确定    前后端交互
            (2)使用set标签和if标签的结合方式解决：
                使用set标签后，可以在每一个修改值的后面加上逗号;
                若该值是最后一个条件，默认会去掉后面的符号，比如逗号;
            注：
                有时候，可能会把''的内容作为修改后的内容(特殊);
                使用if标签时，test属性值可设置为：直接判断是不是空;
        -->
        <set>
            <if test="userName!=null and userName!=''">
                user_name=#{userName},
            </if>
            <if test="userBirthday!=null">
                user_birthday=#{userBirthday},
            </if>
            <if test="userAge!=null and userAge!=0">
                user_age=#{userAge},
            </if>
            <if test="userSex!=null and userSex!=''">
                user_sex=#{userSex},
            </if>
            <if test="userAddress!=null and userAddress!=''">
                user_address=#{userAddress},
            </if>
        </set>
        where user_id=#{userId};
    </update>

    <!--
        插入单条数据
        void insertUserNew(UserNew userNew);
    -->
    <insert id="insertUserNew" parameterType="UserNew">
        insert into user_new

        <!--
            trim标签：
            prefix：前缀
            suffix：后缀
            suffixOverrides：去除后面多余的逗号
        -->
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userName!=null and userName!=''">
                user_name,
            </if>
            <if test="userBirthday!=null">
                user_birthday,
            </if>
            <if test="userAge!=null and userAge!=0">
                user_age,
            </if>
            <if test="userSex!=null and userSex!=''">
                user_sex,
            </if>
            <if test="userAddress!=null and userAddress!=''">
                user_address,
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userName!=null and userName!=''">
                #{userName},
            </if>
            <if test="userBirthday!=null">
                #{userBirthday},
            </if>
            <if test="userAge!=null and userAge!=0">
                #{userAge},
            </if>
            <if test="userSex!=null and userSex!=''">
                #{userSex},
            </if>
            <if test="userAddress!=null and userAddress!=''">
                #{userAddress},
            </if>
        </trim>
    </insert>
    <!--
        插入多条数据
        void insertUserNewList(List<UserNew> userNewList);
    -->
    <insert id="insertUserNewList" parameterType="list">
        insert into user_new(user_name,user_age) values

        <!--
            foreach标签：
            collection：遍历的数据的类型
            item：遍历到的每一项数据
            separator：分隔符
            open：开始
            close：结束
        -->
        <foreach collection="list" item="UserNew" separator=",">
            (#{UserNew.userName},#{UserNew.userAge})
        </foreach>
    </insert>

    <!--
        删除单条数据
        void deleteUserNew(UserNew userNew);
    -->
    <delete id="deleteUserNew" parameterType="UserNew">
        DELETE FROM user_new
        <where>
            <if test="userName!=null and userName!=''">
                and user_name=#{userName}
            </if>
            <if test="userBirthday!=null">
                and user_birthday=#{userBirthday}
            </if>
            <if test="userAge!=null and userAge!=0">
                and user_age=#{userAge}
            </if>
            <if test="userSex!=null and userSex!=''">
                and user_sex=#{userSex}
            </if>
            <if test="userAddress!=null and userAddress!=''">
                and user_address=#{userAddress}
            </if>
        </where>
    </delete>
    <!--
        根据id删除数据
        void deleteUserNewById(Integer userNewId);
    -->
    <delete id="deleteUserNewById" parameterType="int">
        delete from user_new
        where user_id = #{userId}
    </delete>
    <!--
        根据id批量删除
        void void deleteUserNewByIdList(List<Integer> idList);
    -->
    <delete id="deleteUserNewByIdList" parameterType="list">
        delete from user_new where user_id in
        <foreach collection="list" item="userId" open="(" close=")" separator=",">
            #{userId}
        </foreach>
    </delete>
    <!--
        查询用户（UserNew）和购物车（Cart）的数据
        List<UserNew> queryUserAndCart();
    -->
    <resultMap id="UserAndCartMap" type="UserNew">
        <id column="user_id" property="userId"></id>
        <result column="user_name" property="userName"></result>
        <result column="user_birthday" property="userBirthday"></result>
        <result column="user_age" property="userAge"></result>
        <result column="user_sex" property="userSex"></result>
        <result column="user_address" property="userAddress"></result>

        <!--
            association：
            对应的一个对象时手动映射;
            描述的是表和表之间是一对一的关系;
            property：就是在实体类中新创建另一个实体类的成员变量名，
                      本例中是在UserNew实体类中 对应的 成员变量Cart的属性名
            javaType：(Cart)属性的Java类型
        -->
        <association property="cart" javaType="Cart">
            <id column="cart_id" property="cartId"></id>
            <result column="user_id" property="userId"></result>
            <result column="total_num" property="totalNum"></result>
            <result column="total_money" property="totalMoney"></result>
        </association>
    </resultMap>

    <select id="queryUserAndCart" resultMap="UserAndCartMap">
        SELECT * FROM user_new t1,cart t2
        where t1.user_id = t2.user_id;
    </select>

    <!--
    查询用户和对应产品的数据（多对多）
    List<UserNew> queryUserAndProd();
    -->
    <resultMap id="UserAndProdMap" type="UserNew">
        <id column="user_id" property="userId"></id>
        <result column="user_name" property="userName"></result>
        <result column="user_birthday" property="userBirthday"></result>
        <result column="user_age" property="userAge"></result>
        <result column="user_sex" property="userSex"></result>
        <result column="user_address" property="userAddress"></result>

        <!--用户和购物车：一对一-->
        <association property="cart" javaType="Cart">
            <id column="cart_id" property="cartId"></id>
            <result column="user_id" property="userId"></result>
            <result column="total_num" property="totalNum"></result>
            <result column="total_money" property="totalMoney"></result>

            <!--购物车和购物车项：一对多-->
            <collection property="cartItemList" ofType="CartItem">
                <id column="cart_item_id" property="cartItemId"></id>
                <result column="cart_id" property="cartId"></result>
                <result column="prod_id" property="prodId"></result>
                <result column="prod_num" property="prodNum"></result>
                <result column="prod_money" property="prodMoney"></result>
                <!--购物车项和产品：一对一-->
                <association property="prod" javaType="Prod">
                    <id column="prod_id" property="prodId"></id>
                    <result column="prod_name" property="prodName"></result>
                    <result column="prod_price" property="prodPrice"></result>
                    <result column="prod_img" property="prodImg"></result>
                    <result column="prod_desc" property="prodDesc"></result>
                </association>
            </collection>
        </association>
    </resultMap>
    <select id="queryUserAndProd" resultMap="UserAndProdMap">
        SELECT * FROM user_new t1,cart t2,cart_item t3,prod t4
        WHERE t1.user_id = t2.user_id
        AND t2.cart_id = t3.cart_id
        and t3.prod_id = t4.prod_id
    </select>

    <!--
        查询所有用户数据（延迟加载购物车数据）
        List<UserNew> queryUserLazyLoad();
    -->
    <resultMap id="queryUserLazyLoadMap" type="UserNew">
        <id column="user_id" property="userId"></id>
        <result column="user_name" property="userName"></result>
        <result column="user_birthday" property="userBirthday"></result>
        <result column="user_age" property="userAge"></result>
        <result column="user_sex" property="userSex"></result>
        <result column="user_address" property="userAddress"></result>
        <!--
            association：
            一对一;
            对应的一个对象时手动映射;
            描述的是表和表之间是一对一的关系;
            property：就是在实体类中新创建另一个实体类的成员变量名，
                      本例中是在UserNew实体类中 对应的 成员变量Cart的属性名
            javaType：(Cart)属性的Java类型

            select：属性值表示要延迟加载的方法   完整的路径
            column：如下SQL语句查询的结果中的某个字段(user_id)的值要作为参数传递给select属性值表示的方法
        -->
        <association property="cart" javaType="Cart"
                     select="com.javasm.mapper.CartMapper.queryCartById" column="user_id">

        </association>
    </resultMap>
    <select id="queryUserLazyLoad" resultMap="queryUserLazyLoadMap">
        select * from user_new;
    </select>
</mapper>